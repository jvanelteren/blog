[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Welcome to my blog. Here I share some of my personal data science initiatives."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Personal blog of Jesse van Elteren",
    "section": "",
    "text": "Diving into BoardGameGeek\n\n\n\n\n\n\n\nboardgames\n\n\nanalysis\n\n\nvisualisation\n\n\n\n\nKey insights on board game ratings\n\n\n\n\n\n\nJan 19, 2022\n\n\nJesse van Elteren\n\n\n\n\n\n\n  \n\n\n\n\nPlaying around with GLIDE image model\n\n\n\n\n\n\n\nimages\n\n\nai\n\n\n\n\nOpenAI tackles text to image\n\n\n\n\n\n\nJan 3, 2022\n\n\nJesse van Elteren\n\n\n\n\n\n\n  \n\n\n\n\nAdvent of Code analysis through the years\n\n\n\n\n\n\n\npuzzles\n\n\nanalysis\n\n\nvisualisation\n\n\n\n\nWhat can we learn from the stats?\n\n\n\n\n\n\nJan 2, 2022\n\n\nJesse van Elteren\n\n\n\n\n\n\n  \n\n\n\n\nAdvent of Code\n\n\n\n\n\n\n\npuzzles\n\n\n\n\nSolving puzzles with code\n\n\n\n\n\n\nJul 10, 2021\n\n\nJesse van Elteren\n\n\n\n\n\n\n  \n\n\n\n\nTurnonderzoek op het journaal\n\n\n\n\n\n\n\ntv\n\n\nanalysis\n\n\n\n\nTweederde van alle turners heeft te maken met grensoverschrijdend gedrag?\n\n\n\n\n\n\nApr 29, 2021\n\n\nJesse van Elteren\n\n\n\n\n\n\n  \n\n\n\n\nTekst analyse van Tweede Kamer moties\n\n\n\n\n\n\n\npolitics\n\n\nvisualisation\n\n\napp\n\n\n\n\nWie zet wat op de agenda?\n\n\n\n\n\n\nMar 7, 2021\n\n\nJesse van Elteren\n\n\n\n\n\n\n  \n\n\n\n\nData-analyse Tweede Kamer moties\n\n\n\n\n\n\n\npolitics\n\n\nanalysis\n\n\nvisualisation\n\n\n\n\nGraven in moties vanaf 2009\n\n\n\n\n\n\nFeb 20, 2021\n\n\nJesse van Elteren\n\n\n\n\n\n\n  \n\n\n\n\nFace2Age\n\n\n\n\n\n\n\nprediction\n\n\napp\n\n\n\n\nPredicting someone’s age from their face\n\n\n\n\n\n\nNov 24, 2020\n\n\nJesse van Elteren\n\n\n\n\n\n\n  \n\n\n\n\nCurrent preferred data science setup\n\n\n\n\n\n\n\ntooling\n\n\n\n\nAnd some tips on getting it to work on Google Cloud Platform\n\n\n\n\n\n\nOct 31, 2020\n\n\nJesse van Elteren\n\n\n\n\n\n\n  \n\n\n\n\nRed-Black trees\n\n\n\n\n\n\n\ndatastructure\n\n\n\n\nA love-hate affair with a data structure\n\n\n\n\n\n\nSep 12, 2020\n\n\nJesse van Elteren\n\n\n\n\n\n\n  \n\n\n\n\nPredicting the value of a house\n\n\n\n\n\n\n\nhouse\n\n\nprice\n\n\nprediction\n\n\n\n\nTop 3% in a data science competition\n\n\n\n\n\n\nJul 26, 2020\n\n\nJesse van Elteren\n\n\n\n\n\n\n  \n\n\n\n\nExploring flight patterns above The Netherlands\n\n\n\n\n\n\n\nflights\n\n\nvisualisation\n\n\n\n\nVisualizations of 3.5 million datapoints\n\n\n\n\n\n\nApr 22, 2020\n\n\nJesse van Elteren\n\n\n\n\n\n\n  \n\n\n\n\nOntwikkeling positieve COVID19 testuitslagen\n\n\n\n\n\n\n\ncovid\n\n\nvisualisation\n\n\n\n\nRIVM data door de tijd\n\n\n\n\n\n\nMar 23, 2020\n\n\nJesse van Elteren\n\n\n\n\n\n\n  \n\n\n\n\nExploring 13M board game reviews\n\n\n\n\n\n\n\nboardgames\n\n\nanalysis\n\n\n\n\nMaking a recommender system for boardgames\n\n\n\n\n\n\nMay 28, 2019\n\n\nJesse van Elteren\n\n\n\n\n\n\n  \n\n\n\n\nWie is de Mol\n\n\n\n\n\n\n\ntv\n\n\nprediction\n\n\n\n\n18 seizoenen van WIDM onder het vergrootglas\n\n\n\n\n\n\nJan 12, 2019\n\n\nJesse van Elteren\n\n\n\n\n\n\n  \n\n\n\n\nBuilding a Crypto Trading Bot\n\n\n\n\n\n\n\ncrypto\n\n\ntrading\n\n\nautomation\n\n\n\n\nA short story about motivation\n\n\n\n\n\n\nMar 2, 2018\n\n\nJesse van Elteren\n\n\n\n\n\n\n  \n\n\n\n\nFinding a second hand car bargain\n\n\n\n\n\n\n\ncars\n\n\npricing\n\n\nprediction\n\n\n\n\nA typical data-science workflow made easy\n\n\n\n\n\n\nJun 29, 2017\n\n\nJesse van Elteren\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2017-06-29-cars.html",
    "href": "posts/2017-06-29-cars.html",
    "title": "Finding a second hand car bargain",
    "section": "",
    "text": "When doing the Udacity Machine Learning Engineer course some years ago I had to come up with a capstone project. Being in the market for a new car, I decided to see if I could predict the price of a second-hand car. This project followed a typical data science workflow:\n\nComing up with an idea This step if not always mentioned, but it is and extremely important step. If you don’t come up with an idea you cannot realize it!\nData gathering I choose gaspedaal.nl as site and scraped about 350.000 cars from it. Scraping itself can be legally sketchy, but since this was an academic project and I didn’t overload the server I figured it would be ok. Also Gaspedaal.nl is itself a site that scrapes several car marketplaces.\nData cleaning & preprocessing This step makes sure the data will be of use for a model. It involves removing certain outliers, processing of categorical variables. We all know the garbage in, garbage out principle.\nModel selection The model should generate predictions, but which algorithm to choose. Trying out helps! Choosing some sensible options and pick the best performing one. When you execute a project in a corporate setting of course other deliberations are important such as maintainability, robustness and speed\nModel optimizing Many models have a set of knobs to turn, but what position to put them in for the best results. Again: trying out helps. I’m still looking for a nice Design of Experiments package to do this, but in this project I used the RandomGridSearch, which basically tries and sees what works.\nModel interpretation People often complain about machine learning being a black box, but when you’re not dealing with neural nets that statement is incorrect. Visualisation is the easiest step, but there are also packages that open up the black box, such as the shap package.\n\nThe model worked nicely and I was able to find a reasonably priced Toyota Prius with it. It has two weaknesses though: * The prices on the website are asking prices, not the final selling price. * If the model shows a car is ‘cheap’, it may be it has other problems (no maintenance? damage?). That’s why I did test the car at my own garage before making the purchase."
  },
  {
    "objectID": "posts/2018-03-02-cryptobot.html",
    "href": "posts/2018-03-02-cryptobot.html",
    "title": "Building a Crypto Trading Bot",
    "section": "",
    "text": "What drives you when working on a project? For me motivation is made up of several components:\n\nCuriosity: discover new insights about an interesting topic\nReaching a goal: have a sense of progressing to a goal by solving small obstacles\nLearning: grow a skillset and be able to take on larger goals\nChallenge & Mastery: overcoming the nagging feeling if I’ll be also to tackle the project\n\nWhen I had an idea during the rise of bitcoin these elements where definitely there. But there was another big motivator…\nI had made some money with the rise of bitcoin by buying it early and holding on to it. But what would be even better: a constant risk-free return without having to put much effort in. And that was exactly the idea that came to mind. Simple arbitrage: you open an account on multiple crypto exchanges and monitor the prices for different coins. When the prices are drifting apart you take up two positions: buying a coin at exchange A for a low price, and at the same time selling a coin short at exchange B for a high price. Then transferring the coin you’ve bought at exchange A to exchange B to neutralize the position and voila: profit. If I could have a program running on the background this would make me rich! It required a couple of functionalities to program: monitoring the prices though an API, taking up positions, neutralizing these positions and making sure to have enough crypto funds on the buying exchange. The spreads between the exchanged need to outweigh the transaction and transfer costs in order to be profitable.\nI experienced how this sense of building a golden goose boosted my motivation to new highs. Sometimes I focus a lot on projects to make progress, but this was really next level 😊. After many hours of coding and learning to interact with crypto API’s, I got everything to work automatically. But alas, the opportunities for risk-free arbitrage became very limited, as a result of the markets maturing. The spreads started to get smaller and smaller making my bot not profitable anymore.\nGreed is at the core of many things wrong in this world, but in this case it provided me a very fun and valuable learning experience."
  },
  {
    "objectID": "posts/2019-01-12-widm.html",
    "href": "posts/2019-01-12-widm.html",
    "title": "Wie is de Mol",
    "section": "",
    "text": "Wie is de Mol is enorm populair in Nederland. We zijn inmiddels toe aan het 19e seizoen. Dat betekent dat we langzamerhand ook behoorlijk wat data tot onze beschikking krijgen en er data analyse op kunnen loslaten. Het blijkt een hele leuke dataset te zijn en gaandeweg kwamen er veel interessante vragen naar boven. Ik hoop een aantal WidM vragen te beantwoorden en je misschien ook enthousiast te maken voor data science. Als input heb ik informatie van de site gebruikt, die veel informatie bijhoudt. Leuk om ook eens op te kijken. Dank hiervoor Ronald!\nEn uiteindelijk behandelen we ook de hamvraag, kunnen we het voorspellen: Wie Is De Mol?\nVeel leesplezier!\n\nVoor de data-fans, onderaan staat een link naar GitHub om de code in een Jupyter Notebook te downloaden.\nVoor de niet data-fans, je kan ook meteen naar beneden scrollen voor de eindconclusies\n\n\n\nVoor als je WidM niet kent: het spel start met ongeveer 10 deelnemers. Een van hen is de mol. De deelnemers krijgen opdrachten om geld te verdienen, maar weten dus niet wie de mol is. De mol probeert ervoor te zorgen dat het team weinig geld verdient met de opdrachten.\nElke aflevering is er een stemronde, waarin deelnemers vragen over de mol krijgen. Degene met de meeste fouten moet het spel verlaten. De mol blijft altijd in het spel. Uiteindelijk blijven er nog 3 deelnemers over: de mol en twee deelnemers. De deelnemers krijgen weer vragen over de mol. Degene met het meeste goed is de winnaar. De andere noemen we de verliezer, maar deze is wel ver gekomen! De winnaar verdient de pot.\n\n\n\nEven een opwarmertje, en voor AVRO/TROS belangrijk: hoe populair is het programma? In onderstaande grafiek zie je de kijkcijfers van de meest populaire aflevering, per seizoen. Begon het programma nog met 1 miljoen kijkers, inmiddels zitten we aan meer dan 3 miljoen. Dit lijkt momenteel ook het maximum te zijn.\n\n\n\n\n\n\n\n\nElke aflevering krijgen we sommige verdenkingen van deelnemers te zien. Als er heel weinig verdenkingen tijdens de aflevering worden gedeeld kunnen we waarschijnlijk niet hele betrouwbare conclusies trekken. We maken een grafiek waarin we berekenen hoeveel procent van de verdenkingen bekend is. 1 betekent dat we alle verdenkingen van alle deelnemers weten. De verdenkingen van de mol nemen we nu nog niet mee, die heeft natuurlijk hele andere motieven om iemand te ‘verdenken’.\nHet lijkt erop dat we als tv kijker iets minder te zien krijgen. Lag tot en met seizoen 9 het percentage nog rond de 80%, tegenwoordig moeten we het met 60% doen. Seizoen 5 en 12 zijn sowieso gekke uitschieters. Dit betekent dat we over deze seizoenen waarschijnlijk niet veel kunnen zeggen.\n\n\n\n\n\n\n\n\nAls deelnemers geen idee hebben wie de mol is zullen ze gokken. Door dit gokgedrag verwachten we dat elk seizoen de mol toevallig een aantal verdenkingen door gokkers op zich krijgt. Het aantal ‘gokverdenkingen’ verschilt per seizoen omdat het verschilt hoeveel verdenkingen de tv makers ons laten zien (de grafiek hierboven).\nIn onderstaande grafiek zie je per seizoen hoeveel ‘stemmen’ de mol heeft gekregen, en hoeveel we hadden verwacht op basis van gokken. Als de gele lijn boven de blauwe lijn komt is de mol verdacht en andersom.\nNico uit seizoen 2 en Margriet uit seizoen 15 zijn behoorlijk verdacht. Maar de meest verdachte mol is toch wel Jon, uit seizoen 9. Zowel Anniek, Dennis als Vivienne hadden hem al vrij snel in de smiezen.\nTegelijkertijd zijn er ook een paar niet verdachte mollen in een seizoen waar er wel veel geld uit de pot is gehaald: seizoen 6 (Milouska), 8 (Dennis) en 17 (Thomas).\n\n\n\n\n\n\n\n\nEen veelgehoorde trend is dat er steeds meer gemold wordt door kandidaten die niet de mol zijn. We kunnen dit onderzoeken door te kijken hoe verdacht de winnaar en de verliezer zijn. Terzijde: dit kan natuurlijk ook te maken hebben met hoe verdacht de mol was (verdachte mol = niet verdachte winnaar).\nEens kijken naar de winnaar, in hoeverre hij/zij de aandacht op zich wisten te vestigen. Natuurlijk verwacht je altijd wel een paar verdenkingen op je te krijgen, dus het wordt pas verdacht als je hier boven zit. Het beste voorbeeld hiervan zien we in seizoen 14, waarin Sofie veel meer verdenkingen op zich kreeg dan verwacht. Ook afgelopen seizoen 18 was Ruben een verdachte winnaar.\nToch vind ik het knapper als je kan winnen zonder verdacht te zijn. Bijvoorbeeld seizoen 9 en 12 waarin het heel duidelijk was dat de winnaar een hardwerkende deelnemer was. Complimenten Viviënne en Hadewych!\n\n\n\n\n\n\n\n\nHetzelfde plaatje voor de verliezers. Zoals je hieronder ziet is de verliezer vaak een stuk minder verdacht dan de winnaar: de blauwe lijntjes liggen vaak boven de gele. Ook afgelopen seizoen was Olcay overduidelijk niet de mol.\nUitzondering die de regel bevestigt is seizoen 4, waarin Chandrika zeer verdacht was, maar het uiteindelijk Elise was die echt de mol was.\n\n\n\n\n\n\n\n\nDe deelnemers maken elke aflevering een test, waarbij ze vragen over de mol moeten beantwoorden. Soms geven ze ook aan wie ze verdenken. Maar in hoeverre weten de deelnemers wie de mol is, of wordt er maar wat gegokt? Het lijkt logisch dat er op het begin wordt gegokt en dat er uiteindelijk een beter beeld ontstaat wie de mol is. Laten we kijken hoe goed de uiteindelijke winnaar en verliezer weten te voorspellen wie de mol is.\nEn inderdaad, op het begin van het spel, als er nog veel deelnemers zijn doen de winnaars en verliezers het ongeveer even goed als puur gokken. Dit blijft zo, totdat er nog 4 deelnemers zijn. We zien dat de verliezers het ongeveer even goed blijft doen als gokken, maar de winnaars gaan het veel beter doen. Als er nog 2 deelnemers over zijn (winnaar en verliezer) heeft de winnaar het altijd goed. In de helft van de 18 seizoenen hebben we we hier informatie over. We weten dus niet zeker of het in de andere helft van de seizoenen ook zo was want dat hebben de tv-makers ons niet laten zien.\nMaar toch, 100% score: indrukwekkend!\n\n\n\n\n\n\n\n\nOp basis van bovenstaande grafiek zou je zeggen dat het vrij gemakkelijk is om de mol te ontmaskeren: gewoon luisteren naar de winnaar! Alleen, wie de winnaar is dat weten we pas achteraf. Daarom moeten we nu ook de verdenkingen van de mol meenemen in de verdenkingen. Als je naar alle seizoenen kijkt krijgen zowel de mol en de winnaar iets meer verdenkingen dan verwacht. De verliezer is iets minder verdacht.\n\n\n\n\n\nOnderstaande grafiek geeft aan hoe verdacht de mol winnaar en verliezer waren. Verdachtheid meten we met het aantal verdenkingen die iemand meer heeft gekregen dan je op basis van toeval zou verwachten. We hebben net ook gezien dat de deelnemers pas bij 4 of minder spelers in het spel meer kans hebben om goed te verdenken dan toeval, dus we kijken alleen naar de verdenkingen in de laatste paar rondes. We zien dat over het algemeen de mol het meest verdacht is.\nDe laatste jaren zien we toch meer molgedrag bij de winnaar en is de winnaar meer verdacht dan de verliezer. In 8 van de 18 seizoenen is de mol degene met het meeste stemmen.\nHeel duidelijk is dat de verliezer bijna nooit het meest verdacht is, dit is maar 1 keer voorgekomen (seizoen 3).\n\n\n\n\n\nIn een uiterste poging heb ik nog geprobeerd om het ‘verdenkingsgedrag’ van mol en winnaar te vergelijken. Ook heb ik gekeken naar: - Hoe vaak iemand een tunnelvisie heeft (dezelfde persoon verdenken). Mollen zijn geneigd om 3 of 4 afleveringen dezelfde persoon te verdenken, een soort fake tunnelvisie. - Hoe vaak de verdenkingen van iemand bekend worden gemaakt in de aflevering. Hier kwam geen duidelijk verschil uit tussen mollen en winnaars/verliezers. - Hoe vaak iemand zijn verdenkingen split. De winnaar deed dat iets vaker dan de mol (9 keer mol vaker, 6 keer winnaar vaker, 3 keer gelijk) - Of de mol een man of vrouw was. Het enige nuttige hierbij is wanneer er 2 mannen en 1 vrouw in de finale zitten, de mol meestal een man is (6 van de 7 keer is dit voorgekomen)\nDoor een aantal van deze elementen in een statistisch model op te nemen kon ik onderzoeken of de mol te voorspellen is. Dan kijk je dus naar alle verdenkingen en moet je van 3 deelnemers zeggen wie de mol is, bijvoorbeeld vlak voor de finaleaflevering. Uiteindelijk kon ik in 12 van de 18 seizoenen voorspellen wie de mol was, 2/3 kans dus. Toch al een stuk beter dan 1/3 gokkans, maar zeker niet altijd goed.\n\n\n\n\n\n\n\n\nWe kunnen ook kijken naar de prijzenpot. In onderstaande grafiek zie je de pot op het einde van het seizoen. De pot lijkt wel steeds kleiner te worden. komt dit doordat er minder geld valt te verdienen, zijn de opdrachten moeilijker of wordt er meer gemold)?\n\n\n\n\n\nDe totale potentiële pot was vooral in de eerste seizoenen erg hoog. In seizoen 3 kon er maar lieft 250.000 euro worden verdiend! Daarna het langzaam af. Bezuinigingen bij de publieke omroep? In seizoen 17 en 18 is er weer wat meer te verdienen.\n\n\n\n\n\nHet percentage van de potentiële pot dat wordt binnengehaald schommelt nogal, tussen de 20 en 50 procent. Dit kan natuurlijk door mollen komen, maar soms zijn er ook opdrachten waarbij geld wordt verloren uit de pot. Ik kon geen verband vinden tussen dit percentage en hoe verdacht mol of winnaar was. Misschien komt dit doordat er in sommige seizoenen ook geld kan worden verloren, of misschien is het heel persoonsafhankelijk hoe de mol opereert en hoe goed het team functioneert in geld binnenhalen.\nEigenlijk zijn de winnaar in seizoen 1 (Petra), 2 (Sigrid) en 9 (Hadewych) het meest succesvol geweest. Ze waren ook minder verdacht dan verwacht, dus(?) niet aan het mollen.\nDe meest succesvolle mol is wat lastiger maar ik neig naar Anne-Marie uit seizoen 12: niet verdacht, wel een kleine pot. Maar seizoen 3, 4, 5 en 7 waren ook prima!\n\n\n\n\n\n\n\n\n\nEr zitten grote verschillen tussen de seizoenen in hoe verdacht de mol, de winnaar en de verliezer zijn\nDe winnaar weet vrijwel altijd wie de mol is, maar weet het pas de laatste paar afleveringen\nDe verliezer weet meestal niet wie de mol is en had net zo goed kop of munt kunnen gokken\nDe mol wordt eigenlijk alleen door de winnaar ontmaskerd\nDe prijzenpot voor WidM is gedaald\nWe kunnen geen relatie vinden tussen het percentage van de pot die wordt binnengehaald en het mate van verdenking op mol of winnaar\nWe kunnen op basis van de verdenkingen in de finale iets beter voorspellen wie de mol is (12 van de 18 seizoenen goed voorspeld)\nVoor de toekomst kan het leuk zijn om de verdenkingen van het publiek via de mol-app te bekijken. Doen de tv kijkers het beter of wordt er maar wat gegokt en krijgen we eigenlijk te weinig echte hints?\n\nWelke vragen heb je zelf nog? Veel plezier met Wie is de Mol dit seizoen!\nHier kan je de jupyter notebook downloaden: https://github.com/jvanelteren/wie_is_de_mol\nMocht je data science leuk vinden kan ik je van harte aanraden om eens een gratis online Python programmeercursus te volgen!"
  },
  {
    "objectID": "posts/2019-05-28-boardgames.html",
    "href": "posts/2019-05-28-boardgames.html",
    "title": "Exploring 13M board game reviews",
    "section": "",
    "text": "I like playing games, whether it’s on a computer on as a board game. That’s why the site boardgamegeek.com is a great resource for inspiration about great games. It has extensive information about games and what people think of them, for example with how many players it’s best to play and from what age children are ready for it. They also provide an API to interact with the site. I used this to download all the scores that users have given to games.\nUsing these scores it’s possible to let the computer identify certain latent factors behind games and users. This technique is called collaborative filtering, and it’s the same as Netflix uses to recommend what to watch next. Or amazon.com to advise on your next purchase.\nIn the end what I did was: * Make it into a Kaggle dataset * Did some exploratory data analysis * Got collaborative filtering working * Made it into a webapp, currently offline where people can search for a game and the app will display the games the user probably likes"
  },
  {
    "objectID": "posts/2020-03-23-analyse.html",
    "href": "posts/2020-03-23-analyse.html",
    "title": "Ontwikkeling positieve COVID19 testuitslagen",
    "section": "",
    "text": "Update 31 maart: Het RIVM is overgegaan op een ander type data, namelijk het aantal ziekenhuisopnames per gemeente, alleen zonder historie te publiceren. Hiermee komt er een einde aan deze visualisatie. Misschien ga ik de ziekenhuisopnames nog een keer visualiseren.\nUpdate 18 april: uiteindelijk is de beste informatie de oversterfte per week. Deze is te vinden op de site van het CBS\nDagelijks publiceert het RIVM de inmiddels welbekende testkaart met daarop het aantal mensen dat per 100.000 inwoners in de gemeente positief is getest op Covid-19. Het leek me interessant om het verloop per gemeente te visualiseren.\nHieronder zie je drie grafieken: - Aantal: Totaal aantal positieve testcases (cumulatief) - Relatief: Totaal aantal positieve testcases per 100.000 inwoners - Groei: Toename van het aantal gevallen ten opzichte van 4 dagen geleden. Factor 0 betekent geen extra gevallen, factor 1 betekent een verdubbeling en factor 2 betekent dat er 2x zoveel cases bij zijn gekomen als dat er 4 dagen geleden waren (een verdrievoudiging van het totaal aantal gevallen).\n\n\n\n\n\n\n\nJe kan met de slider het verloop van de epidemie volgen. Zoom in als je hem moeilijk te pakken krijgt. Dag 0 is 3 maart, dit was de eerste dag waarvan ik data kon terug vinden op de site van het RIVM. De laatste dag is 30 maart.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTenslotte nog een mogelijkheid om het verloop in een specifieke gemeente te bekijken\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nOmdat in Nederland lang niet alle gevallen worden getest ligt het werkelijke aantal cases waarschijnlijk veel hoger. Weinig cases in jouw gemeente wil niet zeggen dat er niet meer gevallen zijn! Ook zal bijvoorbeeld een ziekenhuis in de gemeente de aantallen beinvloeden vanwege relatief vaker geteste zorgmedewerkers. Pas als er in Nederland veel meer gaat wordt getest kan je er echt conclusies aan verbinden. Landelijk zeggen IC opnames momenteel meer.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nJe ziet dat sommige lijntjes heel erg stijl omhoog gaan, dat moeten we proberen te verminderen. Houdt je dus aan de maatregelen en adviezen.\n\n\n\n\n\n\n\n\nNote\n\n\n\nIk ben geen specialist en heb deze data van de RIVM site gedownload. Er kunnen dus ook geen rechten aan worden ontleend. De totalen zullen niet helemaal optellen tot de nationele aantallen omdat er ook gevallen zijn waarvan de woonplaats niet bekend is ten tijde van publicatie. Heb je tips laat maar weten!\n\n\n\n\n\n\n\n\nTip\n\n\n\nBedankt ontwikkelaars van Fastpages (heel handige manier om Jupyter notebooks te bloggen) en Altair (voor de visualisaties). Super om dit eens te proberen."
  },
  {
    "objectID": "posts/2020-04-22-flights_above_nl.html",
    "href": "posts/2020-04-22-flights_above_nl.html",
    "title": "Exploring flight patterns above The Netherlands",
    "section": "",
    "text": "Some years ago I woke up early because of a loud aircraft flying over. Couldn’t get back to sleep and decided to use these precious early hours to visualize the air traffic around Hilversum.\nEvery aircraft is equipped with a device called a transponder that transmits flight data about the flight into the air. Organizations like OpenSky aggregate these data and make them available. Below a screenshot of the result, you can see the tracks and some information about the flight is displayed.\n\nBut when revisiting this initial project, I felt there were more opportunities. I obtained air traffic above the Netherlands from February to April (monday’s only), resulting in 11 full days of traffic. Below a first visualisation.\nWhen reading this post on a computer, I recommend zooming in with ctrl + mousewheel. On mobile it’s with your fingers :) Use the buttons on the right to zoom in on the map. If you see a bright white line over your hometown, there is probably a lot of air traffic flying over.\n{% include flight.html %}\nLet’s see if there are more interesting patterns and visualisations. First we split the traffic by altitude.\n\n\n\nStart or landingDeparture/arrivalAircraft passing \n\n\n\nRed: The lowest flying traffic. Airfields such as Eelde, Eindhoven, Dusseldorf and Brussels are visible.\nBlue: All the complex movements of traffic in and out of Amsterdam. These are standard routes being flown to keep the traffic manageable, so called STARs and SIDs.\nGreen: The highest flying aircraft are passing over in mostly straight tracks.\n\nThere are more properties in the data, such as altitude, vertical speed and velocity.\n\n\n\nVertical rate (red=desc)Mean altitude per 1000mMean velocity, dark=slow\n\n\n\nLeft: all the arriving flights are red and departures are blue.\nMiddle: This disco shows aircraft climbing or descending. The colormap is increasing with 1000m per color, starting from red for 0-1000m. Compare it with the left graph: departing flights are quickly climbing to purple, whereas arrivals are flying lower longer. The green to yellow transitions indicate the points where arrival flights are converging for their approach.\nRight: the average speed of the aircraft. Also here you see arrival routes are darker (slower) than departures.\n\nAnd because COVID-19 is here, let’s plot the data of the past weeks.\n\n\n\n\n\n\n\n\n\n\n2020-03-092020-03-162020-03-232020-03-302020-04-062020-04-13\n\n\n‘Normally’ there are 2700 flights above the Netherlands (including some North Sea) with a total airtime of 840 hours per day. That is the equivalent of about 35 aircraft flying continuously. The graph shows the dramatic slowdown to about 1/8 of the original volume.\nThe firelike image on the left side is slowly turning into a collection of night flies: the slowdown of traffic can be easily seen. This has been analyzed more extensively here.\nI also went through callsigns that occur most often. Grouping different types of traffic results in some interesting patterns. A small quiz: which pattern belongs to: - The coastguard - Aerial photography - Military flights - Emergency care flights (trauma) - Police helicopters - Commercial helicopter flights\nAnswers on the bottom of the post.\n\n\n\nABCDEF\n\n\nLet’s end with some visualisations with a certain shade of blue. What type of flights do they represent?\n\n\n\n\n\n\nThat’s it, I had fun visualizing all of this, hope you enjoyed reading it!\nAnswers to the above: - A = Police helicopters. Lots of hovering probably. To the east the German police helicopters, with callsign HUMMEL. - B = Commercial helicopter flights. They mostly start from airfied Den Helder, flying personell to offshore rigs - C = Emergency medical flights. With callsign LIFELN (lifeliner), these helicopters are stationed in Amsterdam, Groningen, Rotterdam and Eindhoven. - D = Aerial photography. To capture the landscape below, these flights often have dense tracks flying back and forth. - E = Coast Guard, with callsign NCG - F = Military. In april a Boeing E-3 Sentry departed from NATO Air Base Geilenkirchen with probably a surveillance training mission.\nAnd the blues represent our flagship carrier KLM! If you want you can download the higher resolution images\n\n\n\n\n\n\nTip\n\n\n\nThanks to OpenSky, Datashader and some wonderful tutorials on the internet, e.g. US Census and PyViz. I used code from these examples as well.\n\n\n\n\n\n\n\n\nNote\n\n\n\nHere you can find my other posts"
  },
  {
    "objectID": "posts/2020-07-26-housing.html",
    "href": "posts/2020-07-26-housing.html",
    "title": "Predicting the value of a house",
    "section": "",
    "text": "Recently I’ve made my way into Kaggle. If it’s new for you, I highly recommend checking it out. Kaggle is a platform where organizations host data science competitions. They come up with a data science challenge, make the data available to Kaggle users, and many data scientist worldwide compete to get the highest score on the leaderboard. After a defined period the competition ends and the winner is awarded with a (monetary) price.\nParticipants also share their code (kernels), and have discussions on the data. This makes it an excellent platform to learn. The competitions can be a bit intimidating, since it can have extremely large datasets (100GB upwards), the objectives can be challenging (imaging, audio, text, combinations) and figuring out how to submit is not always trivial. But of course you can start with simpler competitions such as the classic Titanic example.\nSince I’m quite familiar with tabular data I decided to give the housing competition a try. The training data consists of many features describing about 1500 houses and their selling price. After numerous experiments I ended up with a top 3% score on the leaderboard before throwing in the proverbial towel. The rush of inching up the leaderboard made it a great experience!\nAfterwards I wrote about the main insights, learnings and questions\nNext up: probably a imaging competition with Pytorch or fast.ai"
  },
  {
    "objectID": "posts/2020-09-12-redblacktree.html",
    "href": "posts/2020-09-12-redblacktree.html",
    "title": "Red-Black trees",
    "section": "",
    "text": "After playing around with red-black trees for some time, I’ve grown to really like them, but also hate them at the same time! I’ll explain in this blog why. To understand what a red-black tree is, we’ll first have to touch upon the concept of a binary search tree. The binary search tree is a method of ordering items that can be compared to each other. The easiest example is of course numbers (1 < 2), other object such as letters (a < b) or words (short < longerword) can also be compared.\nA binary tree is very simple and I had fun making one with my six year old daughter. She came up with a list of numbers and together we added them to the tree. The root of the tree is the first item you start with. Next, to add another item you simply check if the item is smaller or larger than the root. If it’s smaller it gets stored into the left branch, if it’s larger it goes to the right branch. A node in the tree can have only one branch on each side. Therefore the tree will have to get deeper when more nodes are added. As an example, a tree with 3 layers holds a maximum of 1+2+4 = 7 nodes. Below an example, where it takes three steps to reach 5,14 and 55 and four steps to reach 62 and 66. These nodes are the edge of the tree and are called leaves.\n\n\n\n\n\nThe advantage of binary search trees is that the items are ordered. For example, you can easily lookup the minimum (just always go left from the root). But also finding an item can be very quick, which is expressed by the number of steps from the root. It makes sense, if you are interested in the left side of the tree, you no longer need to search the right side.\nBut think about a scenario where you insert numbers in order, ascending. The tree would only have right branches! This effectively means you are just storing a list. Now for a small tree (as the one below), that is no problem, but if you are storing a million items this way, you would have to search a million items before inserting the next number. If the tree would have been balanced, it would only take about 20 steps from the root to any leaf (1 million log base 2).\n\n\n\n\n\nThis is where red-black trees come in. They are self-balancing to solve the above problem. In a red-black tree, items are colored in two colors. You’ve guessed it, red or black. There are a couple of rules:\n\nThe root is always black\nWhile going from root to any leaf, you’ll never pass two consecutive red items\nThe amount of black items you pass while going to an end of the tree is the same for each leaf of the tree.\n\nTo preserve these properties insertion and removal can require certain operations, such as recoloring certain items, or rotating part of the tree. And this is where my love and hate comes in. It’s awesome to see the different shapes the tree can take while balancing. Even the root of the tree can change in the process. A couple of examples:\n\n\n\n\n\nIn the above figure, numbers 0 to 10 were inserted in order. The graph shows that the redblack tree has been rotated to now have 3 as root (no longer the 0 it started with initially). Also the paths from the root (3) to the leaves (0,2,4,6,8 and 9) all cross exactly 3 black nodes!\nIf we insert 50 items in order, a nice balanced tree appears\n\nto_insert = list(range(50))\nRBTree(to_insert,silent=True).draw()\n\n\n\n\nWhen we randomize the insertion order a completely different tree arises, but still it’s nicely balanced.\n\nrandom.shuffle(to_insert)\nRBTree(to_insert,silent=True).draw()\n\n\n\n\nI think this looks elegant. However, it’s known that redblack trees can be difficult to implement and indeed it’s been an absolute pain to code the algorithms, with some difficult debugging to take care of all the edge cases to make sure the code runs correctly. More detailes of all the cases you can encounter at Wikipedia. I’ve gained new appreciation for programming concepts such as unit testing, refactoring, and plain old careful reading of the specification. Seeing it work has made this project worth it!\nAfter some reading, I’ve also come across the treap (tree-heap), which is basically using random numbers to make the tree structure as if the items would have been inserted in random order. Which will make the tree balanced with a high probablility.\nTo illustrate the randomness, I’ve twice made a treap with 50 items inserted in order. The resulting trees are different, which does not happen with red-black trees when the insertion order is the same. Treaps look much different then the red-black trees as well.\n\n\n\n\n\n\n\n\n\n\nTreaps are much simpler to implement and outperform red-black trees on insertion, search and deletion, but due to their randomized nature are less consistent. Also red-black trees look nicer in my opinion.\nThat’s it, hope you enjoyed it this exploration of trees!\n\n\n\n\n\n\nTip\n\n\n\nThis page has a nice animation how red-black trees are build. Additionally, Wikipedia has more information about binary search trees, red black trees and treaps"
  },
  {
    "objectID": "posts/2020-10-31-data_science_setup.html",
    "href": "posts/2020-10-31-data_science_setup.html",
    "title": "Current preferred data science setup",
    "section": "",
    "text": "I’ve spend some time tinkering with getting a preferred data science stack up. In this post I’m detailing the choices made and could also help you get started on GCP. If you just want to start with programming, go to Google Colab and you’re set to go.\n\nThe data science setup is now made up of:\n\nAll development in Python (installed via Miniconda), with Pytorch and Fast.ai for deep learning\nA personal computer with Windows 10, VSCode with Jupyter notebooks functionality\nGoogle Cloud Platform with a Docker container running Linux Ubuntu\nGithub for storing the codebase and a github action based blog running fastpages\n\nFor me this works best at the moment. Some remarks on tradeoffs.\n\nPython vs other languages. Python is todays language of choice for data science. It’s just so simple to express ideas in code. Also there are just so many packages available with useful functionality that the whole world is basically an import statement away. Maybe I’ll learn Julia, Kotlin or Swift once, but for now I’m set.\nPytorch vs TensorFlow: Pytorch is so much easier compared to Tensorflow. I remember doing an introduction on Tensorflow and I found it difficult to grasp.\nPytorch vs Fast.ai. Fast.ai is kind of the Keras of Pytorch. It has been a blessing and I do highly recommend it. The online course is great. Also you can get a deeplearning model running in no time. But it’s also an extra layer of abstraction to remember on top of trying to learn Pytorch. So right now I’m now mostly using with Pytorch and Fast.ai once in a while.\nWindows vs Linux: OK for data science everyone says Linux is the go to, but I’m just so accustomed to Windows! I can definitely see the advantages of Linux and are slowly gravitating towards using a command line interface more. Windows made a big step with WSL2, so you can now run Linux from within Windows easily, so I did install Ubuntu locally. Maybe in the future I’ll switch fully to Linux, but for now this is working fine.\nVSCode vs Jupyter Notebooks. In my opinion the setup of running notebooks within VSCode combines the advantages of a fully fledged IDE with the agile development that notebooks are known for.\nHaving an own computer vs doing everything in the cloud. Working in the cloud always has a startup of a couple of minutes. My time is limited, so I do prefer to open VSCode and start coding right away. When I need more compute I use the cloud.\nGCP vs other cloud platforms. This decision was taken based on the $300 free credit you get with GCP.\nGithub: Initially I had all the code on my local computer and I used Git for version control. Now that I sometimes iterate between working locally and in the cloud, I store the main branch on Github and push/pull from whichever environment I’m working on.\nFastpages: First I started on Medium, but fastpages is a live saver for publishing from notebooks. It makes it actually fun to blog, instead of a chore duplicating your work in a blog article\nDocker: For reproducibility, Docker is king. For cloud computing I think it’s the best way. You just make a Dockerfile and know what you will get. Also it can make the steps to deployment easier.\nApp deployment: Don’t know what the best is yet. Have tried Render, and could get a webserver it to work with GCP as well. You can even deploy on Binder with a notebook. Guess this one depends on the use case.\n\nThe remainer of the post is dedicated to helping you out with setting up GCP with Docker. Some things you need:\n\nThe CLI command from Windows to get a VM running\nA startup script to make sure the VM runs the container\nA Dockerfile to build a docker image from\n\nLet’s start with the CLI command\n\ngcloud beta compute instances create gpu `\n--zone=us-central1-c `\n--machine-type=n1-standard-8 `\n--subnet=default `\n--service-account=YOURSERVICEACCOUNT-compute@developer.gserviceaccount.com `\n--image-family=common-cu110 `\n--image-project=deeplearning-platform-release `\n--boot-disk-size=50GB `\n--scopes=https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/devstorage.full_control `\n--accelerator=type=nvidia-tesla-k80,count=1 `\n--metadata=install-nvidia-driver=True `\n--maintenance-policy=TERMINATE `\n--metadata-from-file startup-script=startup-gpu.sh `\n--preemptible\n\nYou can create a GCP VM from the command line interface (CLI) or through the browser based console. Play around with the console to get an idea. Then, on the bottom click gcloud command to see the CLI command to copy in your terminal\nThis command uses ` at end of line since it’s run from Windows Powershell. If you use Linux, use backslash\n\nDon’t use Container Optimizer OS, as of november 2020 they dont install nvidia container runtime, meaning it’s difficult to make use of the GPU inside the container. An approach that works is to use a data science image like common-cu110 as I’ve used here.\nThe K80 is the cheapest GPU, good for experimenting.\nAlso, use –preemtible. You’re VM may be stopped unexpectedly, but it’s about 66% cheaper!\nNext up is the startup script…\n\n#!/bin/bash\n# first some waiting until gpu drivers are truly installed\nwhile ! [[ -x \"$(command -v nvidia-smi)\" ]];\ndo\n  echo \"sleep to check\"\n  sleep 5s\ndone\necho \"nvidia-smi is installed\"\n\nwhile [[ $(command nvidia-smi| cut -c1-10) == \"NVIDIA-SMI\"* ]];\ndo\n  echo \"$(command nvidia-smi)\"\n  echo \"sleeping to check\"\n  sleep 5s\ndone\necho \"$(command nvidia-smi)\"\necho \"nvidia-smi drivers are up\"\n\n# if you have a persistent disk you can use this to automatically mount it, otherwise remove it\nif [ ! -d \"/mnt/disks/storage\" ] \nthen\n  sudo mkdir -p /mnt/disks/storage\n  sudo mount -o discard,defaults /dev/sdb /mnt/disks/storage\n  sudo chmod a+w /mnt/disks/storage\n  sudo cp /etc/fstab /etc/fstab.backup\n  sudo blkid /dev/sdb\n  echo UUID=`sudo blkid -s UUID -o value /dev/sdb` /mnt/disks/storage ext4 discard,defaults,nofail 0 2 | sudo tee -a /etc/fstab\n  echo \"mounting complete \"\nelse\n  echo \"not first startup\"\nfi\n\n# startup your Docker container, with port 6006 mapped to Docker for Tensorboard\ngcloud auth configure-docker\ndocker run -d -p 0.0.0.0:6006:6006 --gpus all --ipc=\"host\" -v /mnt/disks/storage:/ds gcr.io/delta-deck-285906/dockerfile  \necho 'Docker run with GPUs'\n\nThe first part of the startup script is mainly to wait until the gpu drivers are properly installed. Otherwise, docker run –gpus all will throw an error. Additionally, I like to use a persistent disk. To avoid the hassle of having to mount it every time I startup a new VM, this script does the work for you. Finally the most important is the Docker run instruction. It opens your container with GPU support. The first time you start up your VM it will take some minutes, but afterwards it’s almost immediate.\nAfter this I like to connect to the running container with Vscode Remote-Container Attach to running container command. Checkout the Vscode docs for how to set this up. Basically you need to put the external ip of the VM into your SSH config file and add a line to your settings.json\n\n# settings.json\n\"docker.host\": \"ssh://YOURUSER@xxx.xxx.xxx.xxx\",\n\n\nHost xxx.xxx.xxx.xxx\n  HostName xxx.xxx.xxx.xxx.xxx\n  IdentityFile localpath/to/publicsshkey\n  User YOURUSER\n  StrictHostKeyChecking no\n\nOne final file to share: the Dockerfile which you can use to build your Docker image\n\nFROM nvidia/cuda:10.2-runtime-ubuntu18.04\n\n##Set environment variables\nENV LANG=C.UTF-8 LC_ALL=C.UTF-8\n\nRUN apt-get update --fix-missing && apt-get install -y wget byobu\\\n    curl \\\n    git-core \\\n    python3-virtualenv \\\n    unzip \\\n    && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-py38_4.8.3-Linux-x86_64.sh -O ~/miniconda.sh && \\\n    /bin/bash ~/miniconda.sh -b -p /opt/conda && \\\n    rm ~/miniconda.sh && \\\n    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \\\n    echo \". /opt/conda/etc/profile.d/conda.sh\" >> ~/.bashrc && \\\n    echo \"conda activate base\" >> ~/.bashrc\n    \nENV PATH /opt/conda/bin:$PATH\n\nRUN pip --no-cache-dir install --upgrade \\\n        altair \\\n        ipykernel \\\n        kaggle \\\n        fastbook \\\n        tensorboard \\\n        diskcache \\\n        && \\\n    conda install -c fastai -c pytorch fastai && \\\n    pip uninstall -y pillow && \\\n    pip install pillow-simd --upgrade && \\\n    mkdir -p ds/.kaggle && \\\n    git clone https://github.com/fastai/fastbook.git /ds/fastbook\n\n# Open Ports for Jupyter\n# EXPOSE 7745\n\n#Setup File System\nENV HOME=/ds\nENV SHELL=/bin/bash\nENV KAGGLE_CONFIG_DIR=/ds/.kaggle\nVOLUME /ds\nWORKDIR /ds\n\n# Make sure the container stays open\nCMD tail -f /dev/null\n\nThe Docker tutorial by Hamel Husain has helped me greatly, especially the advice to use someone elses dockerfile and start making it your own by gradually adapting. The above dockerfile is based upon his actually.\nThat’s it, hope it has helped you!"
  },
  {
    "objectID": "posts/2020-11-24-face2age.html",
    "href": "posts/2020-11-24-face2age.html",
    "title": "Face2Age",
    "section": "",
    "text": "This blog is about predicting someone’s age by their face. I’ve also made an webpage where you can try to beat the computer.\nDeep learning has seen incredible results the last couple of year. As long as you have a large enough dataset, it you can transform any input to any output. A couple of examples:\n\nImage classification, where you map an image to a label (input an image of a frog, computer outputs ‘frog’)\nSentence generation (if I start a sentence with ‘Today, the weather is’, computer outputs ‘great, let’s take a walk’.\nRecommender system (which is the next video that will be most likely to keep the user watching) As an aside, deep learning is not without it’s ethical problems, for example these social media recommender systems have a tendency to radicalize people, since that maximizes their ‘engagement’ to the platform.\n\nIn this project, I’ve taken on a image regression problem. It’s a nice problem, because the answer is not always obvious: some people look older or younger than they really are. By showing the computer model examples and giving feedback how wrong it is on its prediction, the model is improving. We don’t have to explain anything about how an old or young person looks like. Can you imagine how difficult it would be to program how to recognize wrinkles? This is essentially the wonder of neural networks.\nWhen training a model, an important part is the performance metric. For this task of guessing someone’s age, I’ve chosen Mean Absolute Error, basically how many years you’ve guessed wrong. A prediction of 12 on an actual age of 10 means the MAE is 2, just as a prediction of 8 also has an MAE of 2.\nThe dataset contains about 10.000 images, I’ve trained the model on 70% of the dataset. That leaves about 3k images which the model has not seen. We use this to test it’s performance. In theory, this performance will generalize to other unseen images. In practice that remains to be seen, since real life images can be much messier, e.g. in quality, zoom level and background.\nBelow you can see it getting better over time. The horizontal axis displays how many times we feed the training set to the model. The left graph shows performance on the training set, the right graph on the test set. Initially, it’s off by about 11 years, and slowly converging to a MAE of 2 years. But taking the performance on the training dataset is cheating, we are interested in it’s performance on unseen images! The performance there converges to around 4.2.\n\nLet’s check out predictions on some random images in the test set. In the title the actual age and the predicted age by the model.\n\n\n\n\n\nThat looks pretty good! To take a more general approach, let’s plot the all the images from the test set in a graph.\n\n\n\n\n\nThere are definitely some errors, but overall it seems reasonable. It’s also interesting to plot the faces where the error was largest.\n\n\n\n\n\nIn most of the cases the model was simply off, but there are also faces which look much older or younger, or very blurry ones. Which highlights the importance of understanding the dataset and potentially removing outliers from it.\nAnother approach is to visualize the average error by age.\n\n\n\n\n\nThe error gets larger as someone gets older, which makes perfect sense: when you see a baby you are not going to guess wrong by more then 5 years, but for someone age 50 that is more difficult.\nYou could argue for a slight improvement in the predictions with ages > 60, but it could also be an anomaly. There are few really old faces in the dataset, which could be of influence. There are also 300 images of babies age 0 in the dataset, which I removed from the second chart to have a better visualisation.\nI’ve build a webpage where you can try out if you can beat the computer, or even upload a selfie for fun to see how old the computer thinks you are. Please take the results with a grain of salt. I’ve taken some selfies and the computer estimated me around 27 to 42, which is ballpark accurate. However, a condolence card of my grandmother age 92 was classified as 62, and although she did look young, 62 was an underestimation.\nI’ve had much fun with this project. I hope you like it as well and will try out the application. No guarantees it will be online indefinitely by the way.\n\n\n\n\n\n\nNote\n\n\n\nTechnical details on how it was build: Pytorch, Pretrained resnet-18 model. Application runs on Google Cloud Platform, with a Nginx and Gunicorn running in Docker container. Python backend in Fastapi. Code available on Github, dataset on Kaggle"
  },
  {
    "objectID": "posts/2021-02-20-kamermotieseda.html",
    "href": "posts/2021-02-20-kamermotieseda.html",
    "title": "Data-analyse Tweede Kamer moties",
    "section": "",
    "text": "De verkiezingen komen er weer aan, en de Tweede Kamer heeft een open data portaal. Daar heb ik eens fijn gebruik van gemaakt en alle moties vanaf 2009 gedownload. Het zijn er om precies te zijn 29514 en in dit blog kijk ik of er interessante inzichten uit te halen zijn."
  },
  {
    "objectID": "posts/2021-02-20-kamermotieseda.html#ontwikkeling-van-het-aantal-moties",
    "href": "posts/2021-02-20-kamermotieseda.html#ontwikkeling-van-het-aantal-moties",
    "title": "Data-analyse Tweede Kamer moties",
    "section": "Ontwikkeling van het aantal moties",
    "text": "Ontwikkeling van het aantal moties\n\n\n\n\n\n\n\nHet aantal moties stijgt, met name het aantal aangenomen moties. In verkiezingsjaren (2010, 2012 en 2017) ligt het aantal moties duidelijk lager.\n\n\n\n\n\n\n\nMoties die worden aangenomen halen meestal rond de 120 stemmen. Moties die het niet halen blijven meestal rond de 50 stemmen hangen. Eigenlijk zegt zo’n gemiddelde niet zoveel en kan je beter naar de verdeling van het aantal stemmen voor kijken, dat doen we nu met een histogram per kabinetsperiode.\n\n\n\n\n\nIn de histogrammen gaat het vooral om de verdeling van de moties tijdens de kamerperiodes. * Balkenende IV: een piekje van moties die nauwelijks stemmen krijgen (waarschijnlijk protestmoties), een grote piek met moties die rond de 35 stemmen blijven hangen en een piek met unaniem aangenomen moties * Rutte I: relatief veel moties die het nipt wel of juist niet haalden * Rutte II: veel afgewezen moties * Rutte III: hele grote piek in het aantal unaniem aangenomen moties. Dit lijken er ook steeds meer te worden (500 in 2018, 700 in 2019 en 900 in 2020)\n\n\n\n\n\n\n\nMeestal worden moties ingediend door 1 partij, maar soms zijn er medeindieners. Sinds 2008 is er één special snowflake motie, met maar liefst 16 medeindieners. Kennelijk stond de hele kamer achter een reddingsplan voor VDL Nedcar."
  },
  {
    "objectID": "posts/2021-02-20-kamermotieseda.html#komt-elke-partij-opdagen",
    "href": "posts/2021-02-20-kamermotieseda.html#komt-elke-partij-opdagen",
    "title": "Data-analyse Tweede Kamer moties",
    "section": "Komt elke partij opdagen?",
    "text": "Komt elke partij opdagen?"
  },
  {
    "objectID": "posts/2021-02-20-kamermotieseda.html#welke-partij-is-de-tegenpartij",
    "href": "posts/2021-02-20-kamermotieseda.html#welke-partij-is-de-tegenpartij",
    "title": "Data-analyse Tweede Kamer moties",
    "section": "Welke partij is de ‘tegenpartij’?",
    "text": "Welke partij is de ‘tegenpartij’?\n\n\n\n\n\n\n\nLogischerwijs steunt de oppositie de meeste moties, terwijl de regering vaak tegen stemt. De VVD blokkeert de meeste moties. Tijdens Rutte I en II waren deze verschillen nog groter."
  },
  {
    "objectID": "posts/2021-02-20-kamermotieseda.html#welke-partijen-dienen-het-meeste-moties-in-en-hoe-succesvol-zijn-ze",
    "href": "posts/2021-02-20-kamermotieseda.html#welke-partijen-dienen-het-meeste-moties-in-en-hoe-succesvol-zijn-ze",
    "title": "Data-analyse Tweede Kamer moties",
    "section": "Welke partijen dienen het meeste moties in en hoe succesvol zijn ze?",
    "text": "Welke partijen dienen het meeste moties in en hoe succesvol zijn ze?\n\n\n\n\n\n\n\nIn bovenstaande grafiek zijn de partijen op elkaar gestapeld en is te zien dat het aantal succesvolle moties onder Rutte III sterk is gestegen. De stijging komt vooral door VVD, CDA en Groenlinks.\n\n\n\n\n\n\n\nDeze visualisatie geeft weer hoe succesvol partijen zijn geweest tijdens de verschillende kamerperiodes. Je ziet bijvoorbeeld de PVV, PvdD en SP als partijen met veel moties, maar weinig succesvolle. Ook worden de moties van regeringspartijen vaker aangenomen. Dit komt natuurlijk doordat ze met de regeringspartijen een meerderheid hebben in de TK. Laten we nu eens kijken hoe deze grafiek eruit ziet per zetel, om een ‘productiviteit’ te meten.\n\n\n\n\n\n\n\nOpvallend vind ik het erg lage aantal moties van de VVD per zetel. Het is natuurlijk ook de partij met het hoogste aantal zetels, maar toch. De PvdA is na Rutte II losgegaan, terwijl Groenlinks iets minder indient, maar wel succesvoller is. PvdD dient het meeste moties in per zetel per jaar. Ook SGP en ChistenUnie zijn behoorlijk succesvol per zetel."
  },
  {
    "objectID": "posts/2021-02-20-kamermotieseda.html#wie-zijn-de-motiekanonnen-van-de-tweede-kamer",
    "href": "posts/2021-02-20-kamermotieseda.html#wie-zijn-de-motiekanonnen-van-de-tweede-kamer",
    "title": "Data-analyse Tweede Kamer moties",
    "section": "Wie zijn de ‘motiekanonnen’ van de Tweede Kamer?",
    "text": "Wie zijn de ‘motiekanonnen’ van de Tweede Kamer?\nWie is nu het meest ‘succesvolle’ kamerlid? * De Producent: Lammert van Raan van PvdD dient maar liefst 86 moties in per jaar, hierbij blijft hij Lisa Westerveld van GroenLinks ruim voor (66 per jaar). * De Winnaar: Deze gaat ruimschoots naar Carla Dik-Faber van de ChristenUnie. Zij is met 41 aangenomen moties verreweg het succesvolst. Joba van den Berg-Jansen (CDA) staat op plek twee met 31 successen per jaar, op de voet gevolgd door wederom Lisa Westerveld (30). * De Samenwerker: Kijken we naar de politicus die het meeste moties heeft mede-ingediend staat daar wederom Dik-Faber maar liefst 94 keer als mede-indiener vermeld. In de code heb ik nog volledige top 10 lijstjes per kamerperiode bijgevoegd voor de geinteresseerden."
  },
  {
    "objectID": "posts/2021-02-20-kamermotieseda.html#welke-partijen-werken-samen",
    "href": "posts/2021-02-20-kamermotieseda.html#welke-partijen-werken-samen",
    "title": "Data-analyse Tweede Kamer moties",
    "section": "Welke partijen werken samen?",
    "text": "Welke partijen werken samen?\n\n\n\n\n\n\n\nDuidelijk is hier te zien dat de regeringspartijen vaak samen moties indienen. Van de oppostiepartijen zijn de PvdA, GroenLinks en de SP vaak mede indiener van elkaars moties."
  },
  {
    "objectID": "posts/2021-02-20-kamermotieseda.html#welke-partijen-lijken-het-meeste-op-elkaar-qua-stemgedrag",
    "href": "posts/2021-02-20-kamermotieseda.html#welke-partijen-lijken-het-meeste-op-elkaar-qua-stemgedrag",
    "title": "Data-analyse Tweede Kamer moties",
    "section": "Welke partijen lijken het meeste op elkaar qua stemgedrag?",
    "text": "Welke partijen lijken het meeste op elkaar qua stemgedrag?\n\n\n\n\n\n\n\nIn bovenstaande grafiek is het stemgedrag van alle partijen platgeslagen op één as met een Principal Component Analaysis. Deze as verklaart 40% van het stemgedrag. Of de bar positief of negatief is maakt niet uit, het gaat erom dat vergelijkbare partijen bij elkaar in de buurt liggen. Kennelijk liggen VVD en PvdD het meest van elkaar verwijderd.\nHieronder visualiseren we het stemgedrag op twee assen. Op deze manier kunnen zo’n 60% van het stemgedrag beschrijven (niet 100%!). Als twee partijen vlak bij elkaar liggen wil dus niet zeggen dat ze altijd hetzelfde stemmen. De horizontale as is groter omdat deze meer van het stemgedrag verklaart.\n\n\n\n\n\n\n\nDe x-as lijkt toepasselijk de politieke links-rechts as te beschrijven. De y-as is iets lastiger te duiden, iets met samenwerken vs alleenstaan? Waarschijnlijk komt dit doordat FvD en PVV vaak moties indienen die zij alleen steunen maar de rest van de partijen niet zoals we hebben gezien.\nEr zijn grofweg 3 clusters te onderscheiden: * de oppositie linksonder * de regeringspartijen rechtsonder * PVV en FvD bovenaan.\nIk heb het ook nog met de afgelopen kabinetten vergeleken en komt erop neer dat de ChristenUnie en D66 vaak iets meer naar het midden zitten. In die zin is een ‘linkse samenwerking’ van GroenLinks logischer met SP dan met D66. SGP zit vaak vlakbij de regeringspartijen.\nIn een volgend blog (dat ik hopelijk nog voor de verkiezingen publiceer) bekijk ik de inhoud van de moties. Kijken of er trends zijn in onderwerpen en welke partij het meest actief is op bepaalde onderwerpen.\n\n\n\n\n\n\nNote\n\n\n\nIk heb enkele visualisaties in de blog achterwege gelaten om het nog enigzins leesbaar te houden. Op Google Colab is deze beschikbaar. De code staat op GitHub (Python)"
  },
  {
    "objectID": "posts/2021-03-07-kamermoties_topics.html",
    "href": "posts/2021-03-07-kamermoties_topics.html",
    "title": "Tekst analyse van Tweede Kamer moties",
    "section": "",
    "text": "Nog net voor de verkiezingen deel 2 van het motie-onderzoek! Naast deze blog heb ik ook nog de StemVinder ontwikkeld om snel relevante moties te vinden.\nIn dit deel kijk ik naar de inhoud van de moties. Op de moties te clusteren naar onderwerp gebruikte ik in eerste instantie een bekende techniek Latent Dirichlet Allocation, maar via een gelukkig toeval kwam ik achter een gloednieuwe aanpak die veel beter werkt! Longhow Lam heeft deze toegepast op kamerdebatten van de Tweede Kamer.\nHet Top2Vec algoritme probeert soortgelijke woorden en documenten te clusteren en hieruit onderwerpen te destilleren. In de wordcloud hierboven staan heel generieke woorden die in veel moties voorkomen. Deze zijn niet onderscheidend en worden er automatisch uitgefilterd door het algoritme. Echt weer zo’n voorbeeld van een doorbraak in machine learning die sneller en beter werkt waardoor oude technieken bij het grofvuil kunnen.\nBij de moties worden er ongeveer 250 topics geïdentificeerd. In deze onderwerpen zit wat overlap en het is een beetje lastig visualiseren, dus uiteindelijk heb ik die voor deze blogpost samengevoegd tot 15. Onderop deze blog staan wordclouds van de 15 onderwerpen."
  },
  {
    "objectID": "posts/2021-03-07-kamermoties_topics.html#welk-soort-onderwerpen-staan-op-de-agenda",
    "href": "posts/2021-03-07-kamermoties_topics.html#welk-soort-onderwerpen-staan-op-de-agenda",
    "title": "Tekst analyse van Tweede Kamer moties",
    "section": "Welk soort onderwerpen staan op de agenda?",
    "text": "Welk soort onderwerpen staan op de agenda?\nEerst kijken we naar de ontwikkeling van de onderwerpen van de ingediende moties. We weten al dat het absoluut aantal moties stijgt, dus heb ik gekeken naar de relatieve verdeling van de onderwerpen.\n\n\n\n\n\n\n\nOpvallend dat de verhoudingen redelijk stabiel zijn! Je ziet dat in de loop van de tijd klimaat en energie, milieu en regelgeving (heel veel coronaregels zitten hier ook in gecategoriseerd), sociale zaken en wonen omhoog gaan. Omlaag gaan landbouw en dierenwelzijn, natuur en gaswinning, onderwijs en openbaar vervoer. Binnen de onderwerpen zijn natuurlijk wel verschuivingen waar het precies over gaat. We onderzoeken nu de ingediende moties tijdens de afgelopen Tweede Kamer periode."
  },
  {
    "objectID": "posts/2021-03-07-kamermoties_topics.html#meest-actieve-partijen-per-onderwerp",
    "href": "posts/2021-03-07-kamermoties_topics.html#meest-actieve-partijen-per-onderwerp",
    "title": "Tekst analyse van Tweede Kamer moties",
    "section": "Meest actieve partijen per onderwerp",
    "text": "Meest actieve partijen per onderwerp\nWe onderzoeken welke partijen het meest actief zijn door op drie manieren naar de data te kijken:\n\nAantal ingediende moties (per partij per onderwerp)\nAantal succesvolle moties\nAantal succesvolle moties per zetel\n\n\n\n\n\n\n\n\nIn bovenstaande grafiek zien we bijvoorbeeld dat op onderwijs de meeste moties worden ingediend door Groenlinks (1 in de grafiek), gevolgd door de SP (2), PvdA (3) en D66 (4). Een punt van aandacht is dat deze analyse niet aangeeft wat de partijen met de moties willen bereiken, bijvoorbeeld op openbaar vervoer wil VVD waarschijnlijk heel iets anders bereiken dan SP.\nPVV is erg actief op justitie, en de PvdD op klimaat, dierenwelzijn milieu en natuur. Ook de enorme output van de SP valt op! Maar ingediend is niet hetzelfde als aangenomen, dat wordt de volgende grafiek:\n\n\n\n\n\n\n\nWat betreft het aantal succesvolle moties dan zien we daar ineens vier partijen bovendrijven: CDA, D66, GroenLinks en de VVD. Veel regeringspartijen, dat is logisch want die hebben een meerderheid. Ook vind ik het opvallend dat PvdA echt op sociale zaken en het pensioenstelsel succesvol is en GroenLinks op de andere onderwerpen.\nNu kijken we naar het aantal succesvolle moties per zetel\n\n\n\n\n\n\n\nMet je stem koop je op 17 maart politieke invloed. Dit overzicht geeft weer hoeveel ‘waar je voor je geld’ krijgt, hoeveel succesvolle moties een zetel van een partij er doorheen krijgt per onderwerp. Het is weer een heel ander beeld: de christelijke partijen doen het heel erg goed (even gecheckt en inderdaad het Dik-Faber effect bij de ChristenUnie op Zorg, Voordewind op Buitenlandse zaken) en de SP komt een stuk minder terug. Opvallend ook dat D66 relatief weinig scoort op Onderwijs. Partijen die minder in de prijzen vallen zijn FvD (nr 5 op Europese Unie), de PVV nergens en de VVD op financiele sector (nr 5). Bij de VVD is dit te verklaren doordat ze veel zetels bekleedt."
  },
  {
    "objectID": "posts/2021-03-07-kamermoties_topics.html#waar-richten-de-partijen-zich-op",
    "href": "posts/2021-03-07-kamermoties_topics.html#waar-richten-de-partijen-zich-op",
    "title": "Tekst analyse van Tweede Kamer moties",
    "section": "Waar richten de partijen zich op?",
    "text": "Waar richten de partijen zich op?\nIn bovenstaande grafieken hebben we de partijen onderling vergeleken. Nu kijken we per partij op welk vlak ze het meest actief zijn\n\n\n\n\n\n\n\nAls een partij een aantal heel grote bollen heeft betekent dit dat de partij zich heel erg richt op dit onderwerp. Zijn er geen grote bollen binnen een partij is de inzet meer over de onderwerpen verspreid. Algemene zaken, Onderwijs en Zorg krijgen bij veel partijen veel aandacht. Daarnaast hebben FvD, PVV, 50PLUS en de PvdD een heel uitgesproken profiel. In het achterliggende notebook heb ik ook nog gekeken naar de ontwikkelingen per partij van de afgelopen 4 kamerperiodes."
  },
  {
    "objectID": "posts/2021-03-07-kamermoties_topics.html#ontwikkeling-per-partij",
    "href": "posts/2021-03-07-kamermoties_topics.html#ontwikkeling-per-partij",
    "title": "Tekst analyse van Tweede Kamer moties",
    "section": "Ontwikkeling per partij",
    "text": "Ontwikkeling per partij"
  },
  {
    "objectID": "posts/2021-03-07-kamermoties_topics.html#stemgedrag-per-onderwerp",
    "href": "posts/2021-03-07-kamermoties_topics.html#stemgedrag-per-onderwerp",
    "title": "Tekst analyse van Tweede Kamer moties",
    "section": "Stemgedrag per onderwerp",
    "text": "Stemgedrag per onderwerp\nDan toch nog eens proberen het stemgedrag te visualiseren. Als de VVD iets indient voor de Financiele Sector betekent dit namelijk iets heel anders dan als de SP dat doet. In onderstaande plots staat per onderwerp het stemgedrag gevisualiseerd. Positief of negatief zegt niets, het gaat om partijen die dichtbij of ver weg van elkaar staan. PvdD en VVD vormen meestal de uitersten en verschillen dus het meeste op stemgedrag. Deze grafieken verklaren meestal zo’n 35%-55% van de variatie in het stemgedrag. Let op: het is dus een versimpeling van de werkelijkheid!\n\n\n\n\n\n\n\n‘#’ geeft het aantal moties aan en ‘%’ het percentage dat deze visualisatie verklaart. Het meest opvallend is dat FvD en PVV soms in het midden zitten en soms aan de rechterkant. Bij de Europese Unie mengen SP, PvdD en de SGP zich hier ook in. Als het gaat om pensioenen zitten ze juist meer aan de linkerkant. De groep PvdD, SP, GroenLinks, PvdA en DENK zit standaard links, alleen wederom bij de EU en pensioenstelsel wordt gehusseld. 50PLUS zit vaak in het midden, behalve bij pensioenstelsel."
  },
  {
    "objectID": "posts/2021-03-07-kamermoties_topics.html#onderzoek-naar-klimaat",
    "href": "posts/2021-03-07-kamermoties_topics.html#onderzoek-naar-klimaat",
    "title": "Tekst analyse van Tweede Kamer moties",
    "section": "Onderzoek naar klimaat",
    "text": "Onderzoek naar klimaat\nOmdat ik denk dat klimaat de grootste uitdaging is voor de mensheid heb ik hier de subonderwerpen nog eens doorgenomen. Natuur en milieu zijn natuurlijk ook heel erg belangrijke onderwerpen, maar toch besloten het even bij het klimaat te houden.\n\n\n\n\n\n\n\nDe vraag is op welke partij je stemt: PvdD dient enorm veel moties in en bepaalt hier wel het debat mee. Maar D66 en GroenLinks dienen dan weer meer succesvolle moties in.\nEn hier houdt het een beetje op, voor een stemadvies moet je namelijk uiteindelijk toch weten waar de partijen voor staan. Laat ik daar nu net de StemVinder voor hebben gemaakt. Veel plezier ermee!\n\n\n\n\n\n\nTip\n\n\n\nBedankt Dimo Angelov, bedenker en ontwikkelaar van Top2Vec, Longhow Lam voor de LinkedIn blogpost en Willem Glasbergen voor de tip! Zonder deze drie was het niet gelukt :-)"
  },
  {
    "objectID": "posts/2021-03-07-kamermoties_topics.html#bijlage-classificering-van-de-onderwerpen",
    "href": "posts/2021-03-07-kamermoties_topics.html#bijlage-classificering-van-de-onderwerpen",
    "title": "Tekst analyse van Tweede Kamer moties",
    "section": "Bijlage: classificering van de onderwerpen",
    "text": "Bijlage: classificering van de onderwerpen"
  },
  {
    "objectID": "posts/2021-07-10-aoc.html",
    "href": "posts/2021-07-10-aoc.html",
    "title": "Advent of Code",
    "section": "",
    "text": "aoc\n\n\nRemember these 🎅Advent Calenders🎅 where you open a door each day to find a piece of candy? Advent of Code is like that, but with coding puzzles: from 1st to 25th of December, every day a puzzle unlocks at midnight. Each puzzle has two parts where you can earn a star, so you can earn 2 stars per day, adding up to a total of 50. Since 2015 every year the amount of particpants grows, in 2020 over 150.000 people around the world have participated. You can solve the puzzles any way you like. I’ve always used Python, but anything goes, even Excel (if you are brave).\nI was introduced to AoC in 2018. It was a real challenge🤯 to solve all the puzzles. In 2020 I tried to compete for the leaderboard, which meant getting up at 5:50AM 25 times in a row, which was an experience in itself. Never did I get a spot in the top 100, but I am proud to be part of the ~700 people who finished all the puzzles from 2015 onwards.\nFor old times sake, I’ve listed my personal Top 9 most memorable puzzles of all time (2015-2020):\n\n9) 2019 Day 23: Category Six\nA nice puzzle where you had to simulate computers💻 receiving and sending packets over a network to eachother. Memorable because I later could use it to practice using Python🐍 Async.\n\n\n8) 2018 Day 23: Experimental Emergency Teleportation\nGiven a 3D room with many bots that can reach up to a certain distance, what’s the spot where you can reach most bots? Seems simple, but the room is HUGE! This makes solving the puzzle a nice challenge.\n\n\n7) 2019 Day 13: Care Package\n2019 is a special year for AoC, since you eventually code your own working ‘IntComputer’. During day 13, we used this computer to play arkanoid. Later on there were more puzzles where the IntComputer was used.\n\n\n6) 2020 Day 21: Allergen Assessment\nFor many people probably not very memorable, but this got me the 189th spot on the leaderboard💯, where I normally hovered around 1600. Usage of sets in Python just came together for me in this one.\n\n\n5) 2019 Day 18: Many-Worlds Interpretation\nMemorable because it was very difficult to solve with code and did it eventually on paper! You’re in a maze and need collect keys🗝. The keys correspond to doors that open when you find the key. The mechanism of unlocking doors makes the amount of possible states explode.\n\n\n4) 2018 Day 17: Reservoir Research\nAnother one from my first year of participation. You have to simulate water🌊 falling down into buckets. Just a great puzzle to toy around with. All AoC puzzles have some kind of story to them. I found this one to be especially memorable.\n\n\n3) 2016 Day 11: Radioisotope Thermoelectric Generators\nRemember that puzzle of the wolf🐺, chicken🐔 and farmer👨‍🌾 that have a boat to cross the river? That’s the one, but now with 5 animals and 3 rivers. I played with lego blocks trying to find the best solution. Didn’t work, got confused and in the end had to make it into a BFS, which is an algorithm that comes around frequently in AoC.\n\n\n2) 2018 Day 10: The Stars Align\nA puzzle where you are presented with a set of stars🌟 that are moving towards eachother. Again a simulation where at a certain point of time the stars align into a code. Animating the stars and having to zoom in into that tiny spot where they formed the code was lots of fun.\n\n\n1) 2019 Day 22: Slam Shuffle\nAnd the number one, the only puzzle in 2019 I didn’t solve in the same day. Take a deck of cards🗃, apply some operations on it and identify the card in postion 2020. Easy enough right? Yes, untill for part 2 that deck consists of 119315717514047 cards and you have to apply the operations 101741582076661 times! Good luck brute forcing that. It took me around 20 hours to solve the puzzle and was so close to giving up. Such a great feeling when it finally came together. Wrote a small post on reddit on it.\nI’ve uploaded my solutions to GitHub. People post their solutions on the AoC subreddit, which is a great way to learn from the best.\nNeedless to say I highly recommend AoC! See you all December 1st🎄!"
  },
  {
    "objectID": "posts/2022-01-02-analysis_aoc_stats.html",
    "href": "posts/2022-01-02-analysis_aoc_stats.html",
    "title": "Advent of Code analysis through the years",
    "section": "",
    "text": "Since 2018 I’m participating in 🎅Advent of Code🎅 and enjoying it a great deal. Since AoC has been running since 2015 there has been a sizable amount of data generated. Let’s see what we can learn, starting with the amount of stars awarded each season."
  },
  {
    "objectID": "posts/2022-01-02-analysis_aoc_stats.html#section",
    "href": "posts/2022-01-02-analysis_aoc_stats.html#section",
    "title": "Advent of Code analysis through the years",
    "section": "",
    "text": "In total there have now been more than 10M stars awarded! After a ‘rough’ 2016, AoC has been steadily growing with 2020 as a (Covid?) 100% boost.\nEdit: as BBQspaceflight indicated on the AoC Reddit, probably 2016 was not a rough year, but many people have been solving 2015 at a later time (e.g. they participated in 2018 and afterwards did 2015).\n\n\n\n\n\n\n\nThis plot was originally from Maurits vd Schee. I only plotted the full day. It’s a familiar sight: in general the times are below the hour mark, with a couple going higher. In 2020 and 2021 the completion times look more compressed.\nLow completion times can be a result of two factors: * The puzzles were easier * The participants where better / more competitive\nOne way of investigating the difficulty of a year is by analyzing the completion rate: how many people got all the stars compared to the people that got only 1 star of day 25. These people did make it to day 25, thus put a considerable amount of effort in, but couldn’t finish all puzzles.\nI didn’t wanted to take all participants from day 1, since that number quickly drops during the first couple of days.\n\n\n\n\n\n\n\nIn the above chart, each rectangle symbolizes the people that solved all puzzles during the year. The height shows the completion rate.\nThe completion rate was very high in 2016 and 2017 and lowest in 2018. In 2020 many people finished all puzzles, corresponding with more participants that year.\nFor 2021 the verdict is still out, in a couple of months people will have had time to finish so the completion rate will stabilize.\n\n\n\n\n\n\n\n\nWe see that: * The amount of finishers (people getting all stars) peaked in 2020 * The amount of people that got points on the leaderboard is slowly increasing with 2015 also being very high. Why? * The percentage of finishers getting points is varying. Lower percentages could indicate how competitive the year was.\nAnother indicator can be the time it took to solve a puzzle.\n\n\n\n\n\n\n\nThe fastest completion times add up to around 3 hours, which is amazing. Since nobody ever finished #1 at all puzzles, this is a theoretical minimum.\nThe completion times of #100 add up to a more ‘human’ amount. These times are still way below the amount of time a ‘normal’ participant spends on AoC. For example I consider myself an enthusiast, but my completion times are normally about 2-3x the #100.\n\n\n\n\n\n\n\nThere does seem to be some correlation between the total time the #100 took and the amount of participants finishing all puzzles. Although I’m not sure if it’s causal, could be there are other variables playing a role.\n\nGetting leaderboard points is quite special (I never made it, highscore 119th once), but there are people who do it consistently. Let’s give the top 30 some extra recognition🎈\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAll the people on this top 30 list are amazing, but some awards to hand out: * 🏆Robert Xiao managed to get the most amount of points and overall most leaderboard placements * 🏆betaveros got on average most points & leaderboard entries (ignoring anonymous user here). betaveros also managed to get 50 entries is 2018, which was a one-time event * 🏆glguy for getting the highest score while getting points in all 7 seasons\n\nDoing AoC once and get LB points is nice, but it’s even nicer to do it twice, thrice, etc.\n\n\n\n\n\n\n\nMost of the people that get points manage to do it only once. The y-axis is logaritmic. Who are having so much grit to get points all 7 seasons?\n\n\n\n\n\n\n  \n    \n      \n      user\n      amount_seasons\n      total_points\n      total_leaderboard_placements\n    \n  \n  \n    \n      9\n      glguy\n      7\n      10948\n      172\n    \n    \n      12\n      etotheipi1\n      7\n      9978\n      179\n    \n    \n      18\n      msullivan\n      7\n      8561\n      147\n    \n    \n      19\n      Kevin Yap\n      7\n      8282\n      145\n    \n    \n      43\n      (anonymous user #60233)\n      7\n      5663\n      111\n    \n    \n      69\n      Daniel Rejment\n      7\n      3783\n      78\n    \n    \n      81\n      Roderic Day\n      7\n      3578\n      72\n    \n    \n      111\n      lukechampine\n      7\n      3013\n      71\n    \n    \n      241\n      Shane Mc Cormack\n      7\n      1658\n      29\n    \n  \n\n\n\n\nglguy topping the list. Coming back to our competitiveness discussion, how many points did they score together?\n\n\n\n\n\n\n\nIt’s varying but 2020 and 2021 are lower. This could reflect: * increased competitiveness during the years * natural variation * legends getting older😊\nAll in all an amazing achievement! All in all I think there is a strong case for 2020 and 2021 being more competitive.\nLet’s finally turn to which puzzles were easiest or hardest.\n\n\n\n\n\n\n\n  \n    \n      \n      puzzle\n      user\n      time (seconds)\n    \n  \n  \n    \n      0\n      2019-1-1\n      bluepichu\n      23\n    \n    \n      1\n      2018-1-1\n      Tris Emmy Wilson\n      26\n    \n    \n      2\n      2021-1-1\n      betaveros\n      28\n    \n    \n      3\n      2020-1-1\n      Anish Singhani\n      35\n    \n    \n      4\n      2017-2-1\n      xiaowuc1\n      36\n    \n  \n\n\n\n\nThe easiest puzzles are mostly on day 1. In 2019, the first star was obtained after just 23 seconds!\n\n\n\n\n\n\n  \n    \n      \n      puzzle\n      lb full (seconds)\n    \n  \n  \n    \n      0\n      2021-1-1\n      65\n    \n    \n      1\n      2019-1-1\n      84\n    \n    \n      2\n      2018-1-1\n      92\n    \n    \n      3\n      2021-2-1\n      98\n    \n    \n      4\n      2021-7-1\n      112\n    \n  \n\n\n\n\nThe leaderboard capped (the #100 completed the puzzle) after barely a minute in 2021 for the first star!\n\n\n\n\n\n\n\n  \n    \n      \n      puzzle\n      user\n      time (minutes)\n      title\n    \n  \n  \n    \n      349\n      2018-15-2\n      Simon Parent\n      36\n      Beverage Bandits\n    \n    \n      348\n      2018-17-2\n      Raven Black\n      33\n      Reservoir Research\n    \n    \n      345\n      2018-24-2\n      Simon Parent\n      28\n      Immune System Simulator 20XX\n    \n    \n      344\n      2020-20-2\n      xiaowuc1\n      25\n      Jurassic Jigsaw\n    \n    \n      342\n      2021-23-2\n      goffrie\n      23\n      Amphipod\n    \n    \n      341\n      2019-18-2\n      glguy\n      22\n      Many-Worlds Interpretation\n    \n    \n      340\n      2015-22-2\n      Paul Hankin\n      21\n      Wizard Simulator 20XX\n    \n    \n      339\n      2021-19-2\n      ecnerwala\n      21\n      Beacon Scanner\n    \n    \n      338\n      2019-16-2\n      bluepichu\n      19\n      Coprocessor Conflagration\n    \n    \n      336\n      2017-23-2\n      Lewin Gan\n      19\n      Flawed Frequency Transmission\n    \n  \n\n\n\n\nThe longest 3 solve times were all in 2018! Shoutout to Simon Parent for solving 2 out of the top 3. This list mostly has puzzles that just take a long time to code, with Beverage Bandits as perfect example.\n\n\n\n\n\n\n  \n    \n      \n      puzzle\n      lb full (minutes)\n      title\n    \n  \n  \n    \n      349\n      2015-19-2\n      232\n      Medicine for Rudolph\n    \n    \n      348\n      2015-1-2\n      186\n      Not Quite Lisp\n    \n    \n      347\n      2015-22-2\n      183\n      Wizard Simulator 20XX\n    \n    \n      346\n      2016-11-2\n      164\n      Radioisotope Thermoelectric Generators\n    \n    \n      343\n      2018-15-2\n      143\n      Beverage Bandits\n    \n    \n      342\n      2019-22-2\n      123\n      Slam Shuffle\n    \n    \n      340\n      2019-18-2\n      117\n      Many-Worlds Interpretation\n    \n    \n      338\n      2018-23-2\n      100\n      Experimental Emergency Teleportation\n    \n    \n      337\n      2016-22-2\n      88\n      Grid Computing\n    \n    \n      336\n      2018-24-2\n      87\n      Immune System Simulator 20XX\n    \n  \n\n\n\n\nIf we look at when the leaderboard capped some different puzzles show up. I feel that this list has some more algoritmic challenges (Slam Shuffle for example, but Medicine for Rudolph as well). Also 2015 shows up in the top 3. If these puzzles would be recycled in 2021 they would have been solved faster.\nOverall, I feel 2018 is a strong contender for the most difficult year, with day 15 the most difficult puzzle in the history of Advent of Code!\nHope you enjoyed this analysis and see you back next year! 🎄⭐🎅"
  },
  {
    "objectID": "posts/2022-01-03-glide_image_model.html",
    "href": "posts/2022-01-03-glide_image_model.html",
    "title": "Playing around with GLIDE image model",
    "section": "",
    "text": "You probably know that a computer can describe an image. For example an image of a dog playing with your kids may be translated into ‘dog and children in garden’.\nBut did you know the other way around is now also possible? You come up with a text and the computer renders a new image. Completely new, not like a Google search which searches existing images.\nOpenAI has been one of the premier organisations publishing spectacular results in the past years. They train their models on huge datasets of texts and images. They released a paper on their GLIDE image model, trained on several hundred million images. It outperforms their previous ‘DALL-E’ model in terms of photorealism.\nThey also open-sourced a slimmed down version of their model. I played around with it by coming up with text prompts and let the model generate 10 images for each promt.\nBelow the results. Zoom in on pc with ctrl+mousewheel or on mobile with your fingers. I repeat the text above the images keep it readable while zoomed in.\n\nWhat do you think? Some things I noticed: * The more complex prompts sometimes are only partially fulfilled. For example: a monkey looking at itself in the mirror often does not render the mirror. * The representation sometimes is off, for example the secondright rubber ducky. * The model can be quite wide in it’s approach. When you think of a ‘map of a city’, you probably have 1 type of map in your head. The model generates all sorts of types of maps, all believable\nI also had a culinary adventure: Tried out ‘spagetthi on a plate’ but got results that didn’t look like somethink I’d like to consume… Turned out I misspelled it (should be spaghetti) and the corrected text looked much better. To finish it off, I tried to make it “delicious” and worked out pretty nicely, often the spaghetti get’s some vegetables on top. So next time you order spaghetti in a restaurant, make sure to spell it right!\n\nThe full GLIDE model is larger and also is trained on images of people. See these impressive examples from the paper:\n\nThis clearly is a disruption to the stock photo business and does have a wide variety of use cases.\nAt this point AI can generate believeable news articles including images that are completely false. Still though, many experts feel that we are currently a long way from Artifical General Intelligence and the current deep learning architectures may not get us to AGI.\nTo me, that doesn’t make these ‘narrow’ intelligence less impressive. Hope you enjoyed it!\n\n\n\n\n\n\nTip\n\n\n\nThere are even more examples in the paper, check it out! And in case you can’t get enough, I’ve got even more examples"
  },
  {
    "objectID": "posts/2022-01-19-boardgames.html",
    "href": "posts/2022-01-19-boardgames.html",
    "title": "Diving into BoardGameGeek",
    "section": "",
    "text": "UPDATE: I’ve launched BoardGameFinder where you can find and explore games based on similarity. Give it a try!\n\nDo you like board games? If you do, you may wonder what other great games are out there. I admit that it’s a bit of a guilty pleasure of mine. Many people turn to BoardGameGeek (BGG). This is a great site with many users rating games. I used the BGG API to gather information about: * 410K users rating 19M games * Information on 22K games, such as game type, complexity, minimum age, game duration etc\nThe key insights from this dataset are: * New games receive higher ratings * More complex games receive higher ratings * Less active users give higher ratings\nIn this post we take a deeper look into these insights and explore alternative ways of ranking the best games.\nLet’s dive in!\n\nThe users and ratings\n\n\n\n\n\nUsers give ratings that are often rounded: they give a 7 instead of a 7.23, that’s why you see the spikes on the leftmost chart. Around 4 million reviews end up with a 7.\nLooking at the games, we see a nice normal distribution.\n\n\n\n\n\n\n19% of users only leave 1 rating. Together they only account for 0.5% of all ratings\n5% of users (20k) rating >200 games. Together they account for 27% of all ratings\n44% of games receive <100 ratings. However, these ratings only account of 6% of all ratings.\n7% of games have >2000 ratings. Together they account for 39% of all ratings.\n\n\n\n\n\n\n  Most active users\n  \n    \n       \n      user\n      count\n      average\n    \n  \n  \n    \n      1\n      oldgoat3769967\n      6471\n      6.185752\n    \n    \n      2\n      warta\n      6289\n      7.230800\n    \n    \n      3\n      leffe dubbel\n      6068\n      5.937541\n    \n    \n      4\n      TomVasel\n      5672\n      6.401869\n    \n    \n      5\n      Doel\n      5131\n      7.496200\n    \n  \n\n\n\n  Most rated games\n  \n    \n       \n      Name\n      count\n      average\n    \n  \n  \n    \n      1\n      Pandemic\n      108971\n      7.594996\n    \n    \n      2\n      Carcassonne\n      108881\n      7.416162\n    \n    \n      3\n      Catan\n      108195\n      7.133179\n    \n    \n      4\n      7 Wonders\n      90110\n      7.733539\n    \n    \n      5\n      Dominion\n      81623\n      7.607675\n    \n  \n\n\n\nCheck out the insane number of ratings by oldgoat. And 3 games so close to each other with >100K ratings!\n\n\nDevelopments over the years\n\n\n\n\n\nThere has been incredible growth in the amount of boardgames being released. It does appears to slow down, although many games are for some mysterious reason added a couple of years after they have been released. Therefore the steep drop after 2020 is a bit misleading.\n\n\n\n\n\nAre games being rated higher? After 2005 it seems so! Are games nowadays just better or is there a tendency to rate new games higher? Now luckily I’ve composed this dataset already twice in the past, we can make good use of this:\n\n\n\n\n\nMy conclusion would be that it’s a mix of improved quality and hype: * Scores have been climbing since 2005. There is a rough consensus that boardgames have improved in quality. * As you see the 3 snapshots diverge around 2015. This is a ‘hype’ effect, where the early adopters score a new/upcoming games higher. For any year, the blue line (the ratings from the dataset in 2019) scores highest, after the orange (2020) and lowest in the most recent version of the dataset (2022). Games from 2020 where rated with 7.8 in 2020, but two years later that has dropped to 7.2 and now games from 2022 are rated with 7.8! When games are about 5 years old the ‘hype’ effect is more or less gone and games reach a stable score (around 2014 there is no difference anymore).\nEdit: some BGG users are pointing out it may also have to do with users getting more selective in which games they play\n\n\nComplexity of games\n\n\n\n\n\nBGG has a weight metric, which means how complex a game is. To get a feel what a number means, here some examples: * Monopoly: 1.3 * Catan: 2.3 * Chess: 3.7\nMost of the games have a fairly low weight.\n\n\n\n\n\nThere is a relation between the complexity of the game and the score. More complex games get higher scores, it’s almost a 1 point difference between a game with weight 1 and 5! Are heavy games really ‘better’ than ‘light’ games?\n\n\nAre active users more critical?\n\n\n\n\n\nHere you see the average rating that different user groups are giving. I’ve split the population in 3 parts that all account for 33% of the ratings. The very active group gives lower scores (6.9 avg) compared to the active users (7.2 avg) and the normal users (8.1 avg). The very active users only make up of 6% the population (note it’s a small area), they do give out 33% of the ratings!\nAre normal users less critical or just reviewing better quality games?\nIt’s notable that 11% of all users give only 10 ratings, which accounts for 0.5% of all ratings. You can make a case for filtering these ratings out, since they don’t distinguish games. Although it could also be users only rating their favorites.\nSome of the games are rated by many users that have only rated a single game with a 10. A good example of such a game is Goblin Grapple, but there are around 100 games where this occurs.\nEdit: as pointed out on reddit these single review users could be playtesters or people that just tried that single game.\n\n\nWhat is the best game?\nWhile doing this project so many ideas came to mind on how an alternative ranking could be defined: * Excluding ratings given by inactive users (I took <=10 as threshold) * Excluding games that have received ‘few’ ratings (I took <= 1000) * Accounting for the complexity bonus, so that lighter games end up higher.\nOther ideas: * Account for the release year. This approach I abandoned, since some new games are truly better. The only thing you want to account for is removing the ‘hype’ effect. I did this by excluding games after 2017 from the analysis. * Including ratings with a comment, since these people are more strongly opinionated. It did not differ much. * Training a model that takes the average user rating into account, to account for people consistently rating high or low.\nLet me show you some of the outcomes\n\n\n\n\n\n\n  \n    \n      \n      name\n      avg_rating\n      yearpublished\n      averageweight\n    \n  \n  \n    \n      1\n      Gloomhaven\n      8.64\n      2017\n      3.87\n    \n    \n      2\n      Twilight Imperium: Fourth Edition\n      8.59\n      2017\n      4.26\n    \n    \n      3\n      Pandemic Legacy: Season 1\n      8.56\n      2015\n      2.83\n    \n    \n      4\n      War of the Ring: Second Edition\n      8.45\n      2012\n      4.17\n    \n    \n      5\n      Gaia Project\n      8.43\n      2017\n      4.37\n    \n    \n      6\n      Star Wars: Rebellion\n      8.38\n      2016\n      3.73\n    \n    \n      7\n      Terraforming Mars\n      8.36\n      2016\n      3.24\n    \n    \n      8\n      Too Many Bones\n      8.36\n      2017\n      3.84\n    \n    \n      9\n      Through the Ages: A New Story of Civilization\n      8.35\n      2015\n      4.41\n    \n    \n      10\n      Aeon's End: War Eternal\n      8.34\n      2017\n      2.93\n    \n  \n\n\n\n\nThis corresponds more or less to the top games listed on BGG. Note from ‘averageweight’ that these are all pretty heavy games. Also 2017 appears 5 times.\nBut I don’t have time to play games that are very complex and take many hours! So let’s account for the complexity, such that great lighter games will pop up more. I trained a tree based model with a r2 of 0.3. It’s only 0.3, but that does mean that 30% of the variation in the rating is explained by the complexity!\n\n\nBest games with complexity taken into account\nI trained a model that tries to predict the rating of a game based on it’s complexity. What the model cannot explain by complexity (so-called residuals) is more or less the quality of the game without the complexity bias. I’ve taken 1000 reviews as a minimum for the game to be included. That is pretty harsh (only leaves ~15% of the games), but I wanted to be able to recognize some games. This results in the following top 10:\n\n\n\n\n\n\n  \n    \n      \n      name\n      residual\n      average\n      yearpublished\n      averageweight\n    \n  \n  \n    \n      1\n      Crokinole\n      1.75\n      7.95\n      1876\n      1.25\n    \n    \n      2\n      Monikers\n      1.61\n      7.80\n      2015\n      1.06\n    \n    \n      3\n      Telestrations: 12 Player Party Pack\n      1.56\n      7.75\n      2011\n      1.07\n    \n    \n      4\n      Time's Up! Title Recall!\n      1.51\n      7.71\n      2008\n      1.19\n    \n    \n      5\n      KLASK\n      1.45\n      7.64\n      2014\n      1.08\n    \n    \n      6\n      Pandemic Legacy: Season 1\n      1.42\n      8.59\n      2015\n      2.83\n    \n    \n      7\n      Escape the Dark Castle\n      1.32\n      7.51\n      2017\n      1.23\n    \n    \n      8\n      Time's Up! Edición Amarilla\n      1.30\n      7.49\n      2008\n      1.11\n    \n    \n      9\n      Eat Poop You Cat\n      1.26\n      7.45\n      0\n      1.11\n    \n    \n      10\n      Mythic Battles: Pantheon\n      1.26\n      8.43\n      2017\n      3.03\n    \n  \n\n\n\n\nThis list is ordered by residual, the part that the model could not explain. There are a lot of dexterity and party games in the top, which are of course light games. Pandemic Legacy scores high even while being fairly complex. I was a bit shaken by Eat Poop You Cat, but it seems a nice game you can play with pen and paper. If we filter out the easiest games we get the following list:\n\n\n\n\n\n\n  \n    \n      \n      name\n      residual\n      average\n      yearpublished\n      averageweight\n    \n  \n  \n    \n      1\n      Pandemic Legacy: Season 1\n      1.42\n      8.59\n      2015\n      2.83\n    \n    \n      2\n      Mythic Battles: Pantheon\n      1.26\n      8.43\n      2017\n      3.03\n    \n    \n      3\n      Gloomhaven\n      1.24\n      8.74\n      2017\n      3.87\n    \n    \n      4\n      Star Realms: Colony Wars\n      1.22\n      7.85\n      2015\n      1.90\n    \n    \n      5\n      Azul\n      1.21\n      7.80\n      2017\n      1.76\n    \n    \n      6\n      Aeon's End: War Eternal\n      1.21\n      8.38\n      2017\n      2.93\n    \n    \n      7\n      7 Wonders Duel\n      1.19\n      8.11\n      2015\n      2.22\n    \n    \n      8\n      Twilight Imperium: Fourth Edition\n      1.18\n      8.68\n      2017\n      4.26\n    \n    \n      9\n      Patchwork\n      1.14\n      7.64\n      2014\n      1.62\n    \n    \n      10\n      Kingdom Death: Monster\n      1.11\n      8.61\n      2015\n      4.26\n    \n  \n\n\n\n\nWe do see some heavy games popping back, but there are lighter games as well. I know Pandemic, Azul, 7 Wonders Duel and Patchwork to be great games!\n\n\nWrapping things up with a complete model\nFinally I’ve also trained a model on multiple variables, e.g. the type of game and the year of publication. This model is able to account for about 50% of the variation between average game scores. I think this is a pretty good result. Below you see the impact of the most important variables.\n\n\n\n\n\nAs expected the weight/complexity and year of publication have most impact on the rating of a game. Together they roughly impact the score by 0.5 for each game. In addition certain categories also have a small impact on the score. In more detail:\n\n\n\n\n\nThis is what people talk about with ‘explainable AI’. All the dots represent games, and if they are on the right side it means the impact on the model was positive (a higher rating). The color is about the feature value, where blue means low and red high.\nWhat works best is saying it out loud: ‘if averageweight is high (red), then the impact is positive and the game will receive higher ratings. For ’AdminBetterDescriptionNeeded’ that means that if the game description is lacking, the game will receive lower ratings.\nSo if you want to receive high ratings with your game, just make sure to make it complex, two players simulated wargame that can be played solitaire with miniatures and online as well. You already get the hype effect for free 😋\nWe can also inspect how to model came to it’s prediction for a single game. Below I took Chess as an example:\n\n\n\n\n\nThe average game receives a 6.8 (see the bottom value), then there are all kind of effects going on, with the red bars pushing the prediction higher, the blue ones lower. Chess is quite complex which pushes the prediction up, but it’s also old. Apparently the model also doesn’t like you need to be 6 to play it. All these effects together make the model arrive at a prediction of 7.1.\nSummarizing, we have found that there are multiple features that influence the rating of a game. Also we have explored alternatives of ranking the best games. Finally we put everything together with an explainable machine learning model. Hope you enjoyed this dive into the data behind board games!\nThere are also interesting threads on Reddit and BGG discussing this analysis.\n\n\n\n\n\n\nTip\n\n\n\nSome technical info: I’ve used standard Python data science packages such as Pandas and Matplotlib, SQLite for database, trained models with LightGBM and the interpretation with SHAP. For the blogging in a notebook I use Fastpages. All awesome!\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe data is of course owned by BoardGameGeek. If you want to play with the data, I’ve made it into a Kaggle Dataset."
  },
  {
    "objectID": "posts/turnen/2021-04-29-turnen.html",
    "href": "posts/turnen/2021-04-29-turnen.html",
    "title": "Turnonderzoek op het journaal",
    "section": "",
    "text": "Op het NOS journaal: tweederde van turners heeft te maken met grensoverschrijdend gedrag. Als vader met een meisje op turnen krab je je dan toch even achter de oren… Maar, de interesse was gewekt en voor het lidmaatschap op te zeggen ben ik toch even het ruim 400 pagina’s dikke rapport ingedoken. Uiteraard met de databril op. En dan schrik je toch wel, maar vooral van de eenzijdige journalistiek…\nWaar komt die tweederde vandaan? Het journaal meldt dat het hierbij gaat om oud-sporters en actieve. Dat klopt niet, het gaat om oud sporters (van voor 2014). Deze konden een vragenlijst invullen op de website van de turnbond. De turnbond beschikte niet over de emailadressen van deze turners, dus de participanten moeten op een andere manier hun weg naar de website hebben moeten vinden. 282 deelnemers hebben de vragenlijst ingevuld. Ter referentie, in 2014 had de turnbond 241.435 leden. De onderzoekers melden zelf ook dat de resultaten niet representatief zijn en dat er geen generaliserende conclusies kunnen worden getrokken over de gehele gymsport.\nEr treedt bij dit onderzoek een dubbel selectie-effect op: * Mensen met een sterke mening over het onderwerp zullen de vragenlijst eerder invullen. Vergelijk het met een onderzoek over geluidsoverlast. Welke mensen zullen hierbij reageren, degene die geluidsoverlast ervaren of niet? Om dit effect te verminderen was een alternatieve aanpak geweest om niet aan te kondigen dat dit onderzoek over GOG ging. Maar dat heeft ook weer zo z’n nadelen. * 80% van de deelnemers geeft aan (semi)topsport te hebben beoefend. Van deze oud-topsporters geeft 85% aan met grensoverschrijdend gedrag te maken te hebben gehad. Bij de semi-topsporters is dit 58% en bij de breedtesporters 35%. Het hoge aandeel van topsporters in de respondenten trekt het gemiddelde omhoog naar tweederde. Beide effecten werken vertekenend als je een conclusie wilt trekken over de gehele turnsport. De auteurs benoemen het mogelijke selectie-effect.\nEr zijn ook vragenlijsten per email verstuurd, van de 180.000 turners waarvan gegevens beschikbaar waren zijn alle (semi) topsporters van na 2014 aangeschreven (8147) en 5% (7136) van de overige leden. Ongeveer 18% reageerde. Dit is een ietwat magere respons. Hieronder een gedeelte van de infographic van het rapport, deze geeft het verschil weer tussen de ervaringen van topsporters (60-70% te maken met GOG) en recreatieve sporters (15% te maken met GOG).\nHet aantal respondenten vanuit de recreatieve groep is erg klein, bijvoorbeeld 21 respondenten waren volwassen recreatieve sporters. In werkelijkheid turnt 73% van de turners op recreatief niveau, niet 3% zoals bij de volwassen respondenten. Recreatieve sporters zijn dus enorm ondervertegenwoordigd in de steekproef. Wederom het selectie-effect. De onderzoekers geven aan dat ‘de omvang van grensoverschrijdend gedrag vrijwel niet betrouwbaar is vast te stellen’.\n\nEen heel negatief beeld dus op het journaal. Met betrekking tot de breedtesport kan je nauwelijks cijfermatige conclusies trekken, terwijl het wel wordt gepresenteerd als de turnsport als geheel. Bij wedstrijdsporters is er meer zekerheid, maar blijft het selectie-effect een grote onzekerheid. Maar het genuanceerde verhaal paste natuurlijk niet in het journaal.\nDan is er ook nog een soort positief nieuws, er wordt onderzoek geciteerd uit 2020, door NOC/NSF gepresenteerd als representatief (n=5.000). Turnen staat bij een vergelijkend onderzoek laag in de middenmoot van sporten waar mensen grensoverschrijdend gedrag hebben meegemaakt (voetbal, handbal, hockey, korfbal scoren veel hoger). Bij seksueel grensoverschrijdend gedrag staat turnen nog lager, ongeveer gelijk met ‘schaken’. Zie onder de grafiek over emotioneel grensoverschrijdend gedrag uit dat onderzoek. Hierbij is geen onderscheid gemaakt tussen top- en recreatiesport.\n\nMeer positief nieuws: van de respondenten geven de volwassenen het turnen gemiddeld een 8 (33% geeft een 9 of 10) en de minderjarigen met een 8,5 (54% geeft een 9 of 10). Deze score ligt bij de topsporters wat lager dan bij de recreanten. Maar komt dat door GOG of doordat topsport als minder leuk wordt ervaren? Het zou interessant zijn om deze getallen nog uit te splitsen in groepen die wel/niet GOG te maken hebben gehad. Dan kan je misschien iets zeggen over de impact van GOG/topsport op turnplezier. Hieronder de grafiek van minderjarige respondenten.\n\nDan tenslotte: ik heb echt alleen naar de cijfers gekeken, dit doet niets af aan de ernstige ervaringen die turners in kwestie hebben meegemaakt. Dit is nooit acceptabel en werken aan verbetering van de sport is altijd goed.\nZolang m’n dochter het leuk vindt (en nog geen topsporter is) ga ik in elk geval met gerust hart en veel plezier naar de 🤸‍♀️turntraining🤸‍♂️!"
  }
]